////
/// @author Martin Rocek
/// @group Typography
////

/// Absolute height of body text, in pixels
///
/// @group Config
/// @type Number
$base-font-size: 16px !default;

/// Absolute height of one line of type, in pixels
///
/// @group Config
/// @type Number
$base-line-height: 24px !default;

/// The font unit to use when returning values in rhythm functions
///
/// @group Config
/// @type String
$rhythm-font-unit: px !default;

/// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function
/// to round the line height to the nearest half line height instead of the
/// nearest integral line height to avoid large spacing between lines.
///
/// @group Config
/// @type Boolean
$round-to-nearest-half-line: false !default;

/// Ensure there is at least this many pixels
/// of vertical padding above and below the text.
///
/// @group Config
/// @type Number
$min-line-padding: 2px !default;

/// Most (all?) browsers use a default of 16px for type.
///
/// @type Number
$browser-default-font-size: 16px;

/// The height of one line of type, in rems.
///
/// @type Number
$rem-line-height: calc($base-line-height / $base-font-size) * 1rem;

/// Font-size mixin that calculates accurate font-size and line-height
/// to available breakpoints.
///
/// @example scss - $fs-map variable example
///     $p-sizes: (
///         null: (1em, 1.3), // null field should be always present
///         small: 1.1em,
///         medium: (1.2em, 1.4),
///         900px: 1.5em, // it's possible to use min viewport width as key too
///     )
/// @example scss - usage example
///     p {
///         @include font-size($p-sizes);
///     }
/// @require {variable} $breakpoints
/// @require {mixin} make-font-size
/// @param {map} $fs-map
/// @param {map} $fs-breakpoints [$breakpoints]
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint == null {
            @include make-font-size($fs-font-size);
        }
        @else {
            // If $fs-font-size is a key that exists in
            // $fs-breakpoints, use the value
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }
            @else {
                $fs-breakpoint: "(min-width: #{$fs-breakpoint})";
            }

            @media #{$fs-breakpoint} {
                @include make-font-size($fs-font-size);
            }
        }
    }
}

/// Utility function for mixin font-size.
///
/// @param {string | list} $fs-font-size
@mixin make-font-size($fs-font-size) {
    // If $fs-font-size is a list, include
    // both font-size and line-height
    @if type-of($fs-font-size) == list {
        @include set-font-size(nth($fs-font-size, 1));
    } @else {
        @include set-font-size($fs-font-size);
    }
}

/// Given pixel inputs, print rem values with pixel fallbacks.
/// Based on Bitmanic's rem mixin (https://github.com/bitmanic/rem)
///
/// @param {String} $property  - The css property name
/// @param {String|List|Number} $px-values - The value or values (space-separated list) for $property, in pixels
@mixin px-to-rem($property, $px-values) {
    // Number of pixels in 1rem (default: 16px/rem)
    // When converting to rems, we must divide by this ratio.
    $px-per-rem: calc($base-font-size / 1rem);

    // Print the pixel fallback declaration first so we can override it in capable browsers.
    #{$property}: $px-values;

    // If there is only one value, print the declaration with the value converted to rems.
    @if type-of($px-values) == "number" {
        #{$property}: calc($px-values / $px-per-rem);
    } @else {
        // Otherwise, we've got a list and we'll need to convert each value in turn.
        // Create an empty list that we can dump values into.
        $rem-values: ();
        @each $value in $px-values {
            // If the value is zero, a string or a color, leave it be.
            @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
                $rem-values: append($rem-values, $value);
            } @else {
                $rem-values: append($rem-values, calc($value / $px-per-rem));
            }
        }
        // Print the property and its list of converted values.
        #{$property}: $rem-values;
    }
}

/// Return the height of n baselines.
/// Returns px or rem based on the value of $rhythm-font-unit.
///
/// @param {Number} $lines
@function rhythm($lines: 1) {
    $line-height: if($rhythm-font-unit != px, $rem-line-height, $base-line-height);
    @return $line-height * $lines;
}

/// Calculate the number of baselines required to accomodate a
/// given pixel-based font size.
///
/// @param {Number} $font-size
@function lines-for-font-size($font-size) {
    $lines: if(
        $round-to-nearest-half-line,
        ceil(calc(2 * $font-size / $base-line-height)) / 2,
        ceil(calc($font-size / $base-line-height))
    );
    @if $lines * $base-line-height - $font-size < $min-line-padding * 2 {
        $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
    }
    @return $lines;
}


/// Set type size and baseline grid on the root element.
@mixin establish-baseline {
    html {
        $new-font-size: calc($base-font-size / $browser-default-font-size) * 100%;    // eg. 16px รท 16px * 100%
        // Only set the font size if it differs from the browser default
        @if $new-font-size != 100% {
            font-size: $new-font-size;
        }
        @include set-leading(1);
    }
}

/// Set the font size to the specified number of pixels while
/// maintaining the vertical rhythm.
///
/// @param {Number} $to-size - Desired font size, in pixels
/// @param {Number} $lines   - Desired leading, expressed in baselines (can fractional)
@mixin set-font-size($to-size, $lines: lines-for-font-size($to-size)) {
    @include px-to-rem(font-size, $to-size);
    @include set-leading($lines);
}

/// Adjust the leading to a new multiple of the baseline
///
/// @param {Number} $lines
@mixin set-leading($lines) {
    @include px-to-rem(line-height, $base-line-height * $lines);
}

/// Apply leading whitespace
///
/// @param {Number} $lines
/// @param {String} $property
@mixin leader($lines: 1, $property: margin) {
    @include px-to-rem(#{$property}-top, rhythm($lines));
}

/// Apply trailing whitespace
///
/// @param {Number} $lines
/// @param {String} $property
@mixin trailer($lines: 1, $property: margin) {
    @include px-to-rem(#{$property}-bottom, rhythm($lines));
}

/// Apply leading whitespace as padding
///
/// @param {Number} $lines
@mixin padding-leader($lines: 1) {
    @include leader($lines, padding);
}

/// Apply trailing whitespace as padding
///
/// @param {Number} $lines
@mixin padding-trailer($lines: 1) {
    @include trailer($lines, padding);
}


/// Apply leading and trailing whitespace together.
/// Defaults to equal margins above and below and no padding.
///
/// @param {Number} $leader
/// @param {Number} $trailer
/// @param {Number} $padding-leader
/// @param {Number} $padding-trailer
@mixin rhythm-spacing($leader: 1, $trailer: $leader, $padding-leader: 0, $padding-trailer: $padding-leader) {
    @include leader($leader);
    @include trailer($trailer);
    @include padding-leader($padding-leader);
    @include padding-trailer($padding-trailer);
}

/// Apply a border to one side of an element without throwing off
/// the vertical rhythm. The available space ($lines) must be
/// greater than the width of your border.
///
/// @param {String} $side
/// @param {Number} $lines
/// @param {List} $border: $rule-width $rule-style $rule-color
@mixin side-rhythm-border($side, $lines: 1, $border: $rule-width $rule-style $rule-color) {
    $width: nth($border, 1);
    $style: nth($border, 2);
    $color: nth($border, 3);
    @include px-to-rem(border-#{$side}, $width $style $color);

    $padding: ($base-line-height - $width) * $lines;
    @include px-to-rem(padding-#{$side}, $padding);
}

/// Apply a leading rhythm border
///
/// @param {Number} $lines
/// @param {List} $border: $rule-width $rule-style $rule-color
@mixin leading-border($lines: 1, $border: $rule-width $rule-style $rule-color) {
    @include side-rhythm-border(top, $lines, $border);
}

/// Apply a trailing rhythm border
///
/// @param {Number} $lines
/// @param {List} $border: $rule-width $rule-style $rule-color
@mixin trailing-border($lines: 1, $border: $rule-width $rule-style $rule-color) {
    @include side-rhythm-border(bottom, $lines, $border);
}

/// Apply borders equally to all sides with padding to maintain the vertical rhythm
///
/// @param {Number} $lines
/// @param {List} $border: $rule-width $rule-style $rule-color
@mixin rhythm-borders($lines: 1, $border: $rule-width $rule-style $rule-color) {
    $width: nth($border, 1);
    $style: nth($border, 2);
    $color: nth($border, 3);
    @include px-to-rem(border, $width $style $color);

    $padding: ($base-line-height - $width) * $lines;
    @include px-to-rem(padding, $padding);
}

/// Apply padding equally to all sides and maintain the verticla rhythm.
///
/// @param {Number} $lines
@mixin rhythm-paddings($top: 1, $right: $top, $bottom: $top, $left: $right) {
    $padding-top: $base-line-height * $top;
    $padding-right: $base-line-height * $right;
    $padding-bottom: $base-line-height * $bottom;
    $padding-left: $base-line-height * $left;

    @include px-to-rem(padding-top, $padding-top);
    @include px-to-rem(padding-right, $padding-right);
    @include px-to-rem(padding-bottom, $padding-bottom);
    @include px-to-rem(padding-left, $padding-left);
}